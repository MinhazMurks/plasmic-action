"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const readline = __importStar(require("readline"));
const gatsby_1 = require("../templates/gatsby");
const cmd_utils_1 = require("../utils/cmd-utils");
const file_utils_1 = require("../utils/file-utils");
const npm_utils_1 = require("../utils/npm-utils");
const gatsbyStrategy = {
    create: (args) => __awaiter(void 0, void 0, void 0, function* () {
        const { projectPath, template } = args;
        const createCommand = `npx -p gatsby gatsby new ${projectPath}`;
        const templateArg = template ? ` ${template}` : "";
        // Default Gatsby starter already supports Typescript
        // See where we `touch tsconfig.json` later on
        yield cmd_utils_1.spawnOrFail(`${createCommand}${templateArg}`);
    }),
    configLoader: (args) => __awaiter(void 0, void 0, void 0, function* () {
        var e_1, _a;
        const { projectId, projectPath, projectApiToken } = args;
        const installResult = yield npm_utils_1.installUpgrade("@plasmicapp/loader-gatsby", {
            workingDir: projectPath,
        });
        if (!installResult) {
            throw new Error("Failed to install the Plasmic dependency");
        }
        // create-gatsby will create a default gatsby-config.js that we need to modify
        const gatsbyConfigFile = path_1.default.join(projectPath, "gatsby-config.js");
        const rl = readline.createInterface({
            input: fs_1.createReadStream(gatsbyConfigFile),
            crlfDelay: Infinity,
        });
        let result = "";
        try {
            for (var rl_1 = __asyncValues(rl), rl_1_1; rl_1_1 = yield rl_1.next(), !rl_1_1.done;) {
                const line = rl_1_1.value;
                result += line + "\n";
                // Prepend PlasmicLoader to list of plugins
                if (line.includes("plugins:")) {
                    result += gatsby_1.GATSBY_PLUGIN_CONFIG(projectId, projectApiToken);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (rl_1_1 && !rl_1_1.done && (_a = rl_1.return)) yield _a.call(rl_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        yield fs_1.promises.writeFile(gatsbyConfigFile, result);
    }),
    overwriteFiles: (args) => __awaiter(void 0, void 0, void 0, function* () {
        // in gatsby we can delete all existing pages/components, since all pages are going
        // to be handled by templates/defaultPlasmicPage
        const { projectPath } = args;
        file_utils_1.deleteGlob(path_1.default.join(projectPath, "src/@(pages|components|templates)/*.*"));
        // Create a very basic 404 page - `gatsby build` fails without it.
        // We've deleted the components that the default 404 page depended
        // on, so
        yield fs_1.promises.writeFile(path_1.default.join(projectPath, "src/pages/404.js"), gatsby_1.GATSBY_404);
        // Start with an empty gatsby-node.js
        yield fs_1.promises.writeFile(path_1.default.join(projectPath, "gatsby-node.js"), "");
        const templatesFolder = path_1.default.join(projectPath, "src/templates");
        const defaultPagePath = path_1.default.join(templatesFolder, "defaultPlasmicPage.js");
        if (!fs_1.existsSync(templatesFolder)) {
            yield fs_1.promises.mkdir(templatesFolder);
        }
        yield fs_1.promises.writeFile(defaultPagePath, gatsby_1.GATSBY_DEFAULT_PAGE);
    }),
    build: (args) => __awaiter(void 0, void 0, void 0, function* () {
        const { npmRunCmd, projectPath } = args;
        // A recurrent problem is `Something went wrong installing the "sharp" module`
        // https://github.com/gatsbyjs/gatsby/issues/20957
        // This may be a local problem for each person, but maybe we can try to handle it
        // here
        yield cmd_utils_1.spawnOrFail(`${npmRunCmd} build`, projectPath);
    }),
};
exports.default = gatsbyStrategy;
