#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cli_1 = require("@plasmicapp/cli");
const Sentry = __importStar(require("@sentry/node"));
const chalk_1 = __importDefault(require("chalk"));
const fs = __importStar(require("fs"));
const inquirer_1 = __importDefault(require("inquirer"));
const path = __importStar(require("upath"));
const yargs_1 = __importDefault(require("yargs"));
const cpa = __importStar(require("./lib"));
const lang_utils_1 = require("./utils/lang-utils");
const npm_utils_1 = require("./utils/npm-utils");
if (process.env.CPA_DEBUG_CHDIR) {
    process.chdir(process.env.CPA_DEBUG_CHDIR);
}
// Check for updates
const createPlasmicAppVersion = npm_utils_1.updateNotify();
// Specify command-line args
const argv = yargs_1.default
    .usage("Usage: $0 [options] <project-directory>")
    .example([
    ["$0 my-plasmic-app", "--- Create the project in `my-plasmic-app/`"],
])
    .option("platform", {
    describe: "Target platform",
    choices: ["", "nextjs", "gatsby", "react"],
    default: "",
})
    .option("scheme", {
    describe: "Plasmic integration scheme",
    choices: ["", "codegen", "loader"],
    default: "",
})
    .option("projectId", {
    describe: "Plasmic project ID",
    string: true,
    default: "",
})
    .option("projectApiToken", {
    describe: "Plasmic project API token (optional, to bypass standard auth)",
    string: true,
    default: "",
})
    .option("template", {
    describe: "Specify a template for the created project",
    string: true,
    default: "",
})
    .option("typescript", {
    describe: "Use the default Typescript template",
    boolean: true,
    default: "",
})
    .strict()
    .help("h")
    .alias("h", "help").argv;
// Initialize Sentry
Sentry.init({
    dsn: "https://0d602108de7f44aa9470a41cc069395f@o328029.ingest.sentry.io/5679926",
});
Sentry.configureScope((scope) => {
    //scope.setUser({ email: auth.user });
    scope.setExtra("cliVersion", createPlasmicAppVersion);
    scope.setExtra("args", JSON.stringify(argv));
});
/**
 * Prompt the user for any answers that we're missing from the command-line args
 * @param question instance of a question formatted for `inquirer`
 * @returns
 */
function maybePrompt(question) {
    return __awaiter(this, void 0, void 0, function* () {
        const name = lang_utils_1.ensure(question.name);
        const message = lang_utils_1.ensure(question.message);
        const maybeAnswer = argv[name];
        if (maybeAnswer === null || maybeAnswer === undefined || maybeAnswer === "") {
            const ans = yield inquirer_1.default.prompt(Object.assign({}, question));
            return ans[name];
        }
        else {
            console.log(`${message}: ${maybeAnswer} (specified in CLI arg)`);
            return lang_utils_1.ensure(argv[name]);
        }
    });
}
// Keeping these as globals to easily share with our `crash` function
let projectName = argv._.length > 0 ? argv._[0] + "" : undefined;
let resolvedProjectPath;
/**
 * Main function
 */
function run() {
    return __awaiter(this, void 0, void 0, function* () {
        /**
         * PROMPT USER
         */
        // User-specified project path/directory
        while (!cpa.checkValidName(projectName)) {
            projectName = (yield inquirer_1.default.prompt({
                name: "projectPath",
                message: "What is your project named?",
                default: "my-app",
            })).projectPath.trim();
        }
        // Absolute path to the new project
        resolvedProjectPath = path.resolve(projectName);
        // Prompt for Typescript
        const useTypescript = yield maybePrompt({
            name: "typescript",
            message: "What language do you want to use?",
            type: "list",
            choices: () => [
                {
                    name: "TypeScript",
                    value: true,
                },
                {
                    name: "JavaScript",
                    value: false,
                },
            ],
            default: true,
        });
        // Prompt for the platform
        const platform = lang_utils_1.ensureString(yield maybePrompt({
            name: "platform",
            message: "What React framework do you want to use?",
            type: "list",
            choices: () => [
                {
                    name: "Next.js",
                    value: "nextjs",
                },
                {
                    name: "Gatsby",
                    value: "gatsby",
                },
                {
                    name: "Create React App",
                    value: "react",
                },
            ],
            default: "nextjs",
        }));
        // Scheme to use for Plasmic integration
        // - loader only available for gatsby/next.js
        const scheme = platform === "nextjs" || platform === "gatsby"
            ? yield maybePrompt({
                name: "scheme",
                message: "Which scheme do you want to use to integrate Plasmic?",
                type: "list",
                choices: () => [
                    {
                        name: "PlasmicLoader: recommended default for most websites",
                        short: "PlasmicLoader",
                        value: "loader",
                    },
                    {
                        name: "Codegen: for building complex stateful apps",
                        short: "Codegen",
                        value: "codegen",
                    },
                ],
                default: "loader",
            })
            : "codegen";
        // Get the projectId
        console.log();
        console.log(chalk_1.default.green.bold("Go to this URL and **clone** the project:"));
        console.log("https://studio.plasmic.app/starters/simple-light");
        console.log();
        console.log("  Note the project ID in the URL redirect");
        console.log("  (e.g. https://studio.plasmic.app/projects/PROJECT_ID)");
        let projectId;
        while (!projectId) {
            const rawProjectId = yield maybePrompt({
                name: "projectId",
                message: "What is the project ID of your project?",
            });
            projectId = rawProjectId
                .replace("https://studio.plasmic.app/projects/", "")
                .trim();
            if (!projectId) {
                console.error(`"${rawProjectId}" is not a valid project ID.`);
            }
        }
        const template = argv["template"];
        const projectApiToken = argv["projectApiToken"];
        // RUN IT
        console.log();
        lang_utils_1.assert(platform === "nextjs" || platform === "gatsby" || platform === "react", "platform must be one of ['nextjs', 'gatsby', 'react']");
        // Set the metadata environment variable to tag the future Segment codegen event
        cli_1.setMetadataEnv({
            source: "create-plasmic-app",
        });
        yield cpa.create({
            resolvedProjectPath,
            projectId,
            platform,
            scheme,
            useTypescript,
            projectApiToken,
            template,
        });
    });
}
run().catch((err) => {
    console.log();
    console.log("Aborting installation.");
    cpa.banner("create-plasmic-app failed!");
    console.error("Unexpected error: ");
    console.error(err);
    console.log();
    // Instruct user to remove artifacts
    if (resolvedProjectPath && fs.existsSync(resolvedProjectPath)) {
        console.log(`Please remove ${resolvedProjectPath} and try again.`);
    }
    // Log to Sentry
    if (err) {
        Sentry.captureException(err);
    }
    process.exit(1);
});
