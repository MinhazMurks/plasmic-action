"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const nextjs_1 = require("../templates/nextjs");
const cmd_utils_1 = require("../utils/cmd-utils");
const file_utils_1 = require("../utils/file-utils");
const lang_utils_1 = require("../utils/lang-utils");
const npm_utils_1 = require("../utils/npm-utils");
const common_1 = require("./common");
const nextjsStrategy = {
    create: (args) => __awaiter(void 0, void 0, void 0, function* () {
        const { projectPath, template, useTypescript } = args;
        const createCommand = `npx -p create-next-app create-next-app ${useTypescript ? "--typescript" : ""} ${projectPath}`;
        const templateArg = template ? ` --template ${template}` : "";
        // Default Next.js starter already supports Typescript
        // See where we `touch tsconfig.json` later on
        yield cmd_utils_1.spawnOrFail(`${createCommand}${templateArg}`);
    }),
    installDeps: ({ scheme, projectPath }) => __awaiter(void 0, void 0, void 0, function* () {
        if (scheme === "loader") {
            return yield npm_utils_1.installUpgrade("@plasmicapp/loader-nextjs", {
                workingDir: projectPath,
            });
        }
        else {
            return yield common_1.installCodegenDeps({ projectPath });
        }
    }),
    overwriteConfig: (args) => __awaiter(void 0, void 0, void 0, function* () {
        const { projectPath, scheme } = args;
        if (scheme === "codegen") {
            const nextjsConfigFile = path_1.default.join(projectPath, "next.config.js");
            yield fs_1.promises.writeFile(nextjsConfigFile, `
module.exports = {
  eslint: {
    ignoreDuringBuilds: true,
  },
  trailingSlash: true,
  // Your NextJS config.
};
    `);
        }
    }),
    generateFiles: (args) => __awaiter(void 0, void 0, void 0, function* () {
        // this is supposed to be called for loader case, so we are supposed to remove
        // all the files from pages/ since we have inserted a optional catch all
        const { projectPath, scheme, useTypescript, projectId, projectApiToken, } = args;
        // Always start fresh
        const pagesPath = path_1.default.join(projectPath, "pages");
        file_utils_1.deleteGlob(path_1.default.join(pagesPath, `*.*`));
        const hostPage = path_1.default.join(pagesPath, `plasmic-host.${useTypescript ? "tsx" : "jsx"}`);
        yield fs_1.promises.writeFile(hostPage, nextjs_1.makeNextjsHostPage(scheme));
        if (scheme === "loader") {
            const initFile = path_1.default.join(projectPath, `plasmic-init.${useTypescript ? "ts" : "js"}`);
            yield fs_1.promises.writeFile(initFile, nextjs_1.makeNextjsInitPage(projectId, lang_utils_1.ensure(projectApiToken)));
            // Write catch-all page for loader
            const loaderPage = path_1.default.join(pagesPath, `[[...catchall]].${useTypescript ? "tsx" : "jsx"}`);
            yield fs_1.promises.writeFile(loaderPage, nextjs_1.makeNextjsCatchallPage(useTypescript ? "ts" : "js"));
        }
        else {
            yield common_1.runCodegenSync({
                projectId,
                projectApiToken,
                projectPath,
            });
            // Overwrite the index file
            yield file_utils_1.overwriteIndex(projectPath, "nextjs", scheme);
            // Overwrite the wrapper files to wrap PlasmicRootProvider
            const appFilePath = path_1.default.join(projectPath, "pages", `_app.js`);
            yield fs_1.promises.writeFile(appFilePath, nextjs_1.wrapAppRootForCodegen());
        }
    }),
    build: (args) => __awaiter(void 0, void 0, void 0, function* () {
        const { npmRunCmd, projectPath } = args;
        yield cmd_utils_1.spawnOrFail(`${npmRunCmd} build`, projectPath);
    }),
};
exports.default = nextjsStrategy;
