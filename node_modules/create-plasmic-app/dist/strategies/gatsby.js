"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const gatsby_1 = require("../templates/gatsby");
const cmd_utils_1 = require("../utils/cmd-utils");
const file_utils_1 = require("../utils/file-utils");
const npm_utils_1 = require("../utils/npm-utils");
const gatsbyStrategy = {
    create: (args) => __awaiter(void 0, void 0, void 0, function* () {
        const { projectPath, template } = args;
        const createCommand = `npx -p gatsby gatsby new ${projectPath}`;
        const templateArg = template ? ` ${template}` : "";
        // Default Gatsby starter already supports Typescript
        // See where we `touch tsconfig.json` later on
        yield cmd_utils_1.spawnOrFail(`${createCommand}${templateArg}`);
    }),
    configLoader: (args) => __awaiter(void 0, void 0, void 0, function* () {
        const { projectId, projectPath, projectApiToken } = args;
        const installResult = yield npm_utils_1.installUpgrade("@plasmicapp/loader-gatsby", {
            workingDir: projectPath,
        });
        if (!installResult) {
            throw new Error("Failed to install the Plasmic dependency");
        }
        yield file_utils_1.modifyDefaultGatsbyConfig(projectPath, projectId, projectApiToken);
    }),
    overwriteFiles: (args) => __awaiter(void 0, void 0, void 0, function* () {
        // in gatsby we can delete all existing pages/components, since all pages are going
        // to be handled by templates/defaultPlasmicPage
        const { projectPath } = args;
        file_utils_1.deleteGlob(path_1.default.join(projectPath, "src/@(pages|components)/*.*"));
        // Create a very basic 404 page - `gatsby build` fails without it.
        // We've deleted the components that the default 404 page depended
        // on, so
        yield fs_1.promises.writeFile(path_1.default.join(projectPath, "src/pages/404.js"), gatsby_1.GATSBY_404);
    }),
    build: (args) => __awaiter(void 0, void 0, void 0, function* () {
        const { npmRunCmd, projectPath } = args;
        // A recurrent problem is `Something went wrong installing the "sharp" module`
        // https://github.com/gatsbyjs/gatsby/issues/20957
        // This may be a local problem for each person, but maybe we can try to handle it
        // here
        yield cmd_utils_1.spawnOrFail(`${npmRunCmd} build`, projectPath);
    }),
};
exports.default = gatsbyStrategy;
