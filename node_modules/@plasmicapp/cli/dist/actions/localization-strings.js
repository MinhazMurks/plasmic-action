"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.localizationStrings = void 0;
const chalk_1 = __importDefault(require("chalk"));
const api_1 = require("../api");
const deps_1 = require("../deps");
const lib_1 = require("../lib");
const auth_utils_1 = require("../utils/auth-utils");
const config_utils_1 = require("../utils/config-utils");
const file_utils_1 = require("../utils/file-utils");
const user_utils_1 = require("../utils/user-utils");
function localizationStrings(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!opts.projects || opts.projects.length === 0) {
            throw new lib_1.HandledError(`Missing projects.`);
        }
        const output = !opts.output
            ? opts.format === "po"
                ? "data.po"
                : "data.json"
            : opts.output;
        const auth = yield auth_utils_1.getOrStartAuth({
            baseDir: "",
            host: opts.host || config_utils_1.DEFAULT_HOST,
        });
        if (auth) {
            const api = new api_1.PlasmicApi(auth);
            deps_1.logger.info(`Generating localization strings for ${chalk_1.default.bold(opts.projects.join(", "))}...`);
            const data = yield api.genLocalizationStrings(opts.projects, opts.format);
            if (file_utils_1.existsBuffered(output)) {
                const overwrite = yield user_utils_1.confirmWithUser(`File ${output} already exists. Do you want to overwrite?`, opts.forceOverwrite);
                if (!overwrite) {
                    throw new lib_1.HandledError(`Cannot write to ${output}; file already exists.`);
                }
            }
            file_utils_1.writeFileText(output, data);
            deps_1.logger.info(`Localization strings have been written to ${output}`);
        }
        else {
            deps_1.logger.error("Missing auth information");
        }
    });
}
exports.localizationStrings = localizationStrings;
