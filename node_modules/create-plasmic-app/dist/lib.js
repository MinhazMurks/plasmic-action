"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setMetadata = exports.banner = exports.checkValidName = exports.create = exports.toString = void 0;
const cli_1 = require("@plasmicapp/cli");
const chalk_1 = __importDefault(require("chalk"));
const fs = __importStar(require("fs"));
const path = __importStar(require("upath"));
const validate_npm_package_name_1 = __importDefault(require("validate-npm-package-name"));
const file_utils_1 = require("./utils/file-utils");
const npm_utils_1 = require("./utils/npm-utils");
function toString(s) {
    return s === "nextjs" ? "Next.js" : s === "gatsby" ? "Gatsby" : "React";
}
exports.toString = toString;
function create(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { resolvedProjectPath, projectId, platform, scheme, projectApiToken, useTypescript, template, } = args;
        console.log("Let's get started! Here's what we'll do: ");
        console.log("1. Authenticate with Plasmic");
        console.log("2. Create a React/Next/Gatsby repo");
        console.log("3. Integrate with Plasmic");
        // Authenticate with Plasmic
        banner("AUTHENTICATING WITH PLASMIC");
        if (projectApiToken) {
            console.log("Skipping auth; using the given project API token.");
        }
        else {
            const promise = cli_1.auth({
                host: "https://studio.plasmic.app",
                check: true,
            })
                .catch(() => {
                return cli_1.auth({ host: "https://studio.plasmic.app" });
            })
                .catch(() => {
                throw new Error("Failed to authenticate with Plasmic. Please run `npx @plasmicapp/cli auth` manually.");
            });
            yield promise;
        }
        // Calling `npx create-XXX` means we don't have to keep these dependencies up to date
        banner("CREATING THE PROJECT");
        if (!["nextjs", "gatsby", "react"].includes(platform)) {
            throw new Error(`Unrecognized platform: ${platform}`);
        }
        let createCommand = "";
        if (platform === "nextjs") {
            createCommand += `npx -p create-next-app create-next-app ${resolvedProjectPath}`;
            if (template) {
                createCommand += ` --example ${template}`;
            }
            // Default Next.js starter already supports Typescript
            // See where we `touch tsconfig.json` later on
        }
        else if (platform === "gatsby") {
            createCommand += `npx -p gatsby gatsby new ${resolvedProjectPath}`;
            if (template) {
                createCommand += ` ${template}`;
            }
            // Default Gatsby starter already supports Typescript
            // See where we `touch tsconfig.json` later on
        }
        else if (platform === "react") {
            createCommand += `npx -p create-react-app create-react-app ${resolvedProjectPath}`;
            if (template) {
                createCommand += ` --template ${template}`;
            }
            else if (useTypescript) {
                createCommand += " --template typescript";
            }
        }
        else {
            throw new Error(`Unrecognized platform: ${platform}`);
        }
        yield spawnOrFail(createCommand);
        // Create tsconfig.json if it doesn't exist
        // this will force Plasmic to recognize Typescript
        const tsconfigPath = path.join(resolvedProjectPath, "tsconfig.json");
        if (useTypescript && !fs.existsSync(tsconfigPath)) {
            fs.writeFileSync(tsconfigPath, "");
            const installTsResult = yield npm_utils_1.installUpgrade("typescript @types/react", {
                workingDir: resolvedProjectPath,
            });
            if (!installTsResult) {
                throw new Error("Failed to install Typescript");
            }
        }
        // Install dependency
        banner("INSTALLING THE PLASMIC DEPENDENCY");
        const installResult = scheme === "loader"
            ? yield npm_utils_1.installUpgrade("@plasmicapp/loader", {
                workingDir: resolvedProjectPath,
            })
            : yield npm_utils_1.installUpgrade("@plasmicapp/cli", {
                workingDir: resolvedProjectPath,
            });
        if (!installResult) {
            throw new Error("Failed to install the Plasmic dependency");
        }
        // Trigger a sync
        const pkgMgr = npm_utils_1.detectPackageManager(resolvedProjectPath);
        const npmRunCmd = pkgMgr === "yarn" ? "yarn" : "npm run";
        if (scheme === "codegen") {
            banner("SYNCING PLASMIC COMPONENTS");
            const project = projectApiToken
                ? `${projectId}:${projectApiToken}`
                : projectId;
            yield spawnOrFail(`npx plasmic sync --yes -p ${project}`, resolvedProjectPath);
        }
        else if (scheme === "loader") {
            if (platform === "nextjs") {
                yield file_utils_1.writeDefaultNextjsConfig(resolvedProjectPath, projectId);
            }
            else if (platform === "gatsby") {
                yield file_utils_1.modifyDefaultGatsbyConfig(resolvedProjectPath, projectId);
            }
            else {
                throw new Error("PlasmicLoader is only compatible with either Next.js or Gatsby");
            }
            if (projectApiToken) {
                yield file_utils_1.writePlasmicLoaderJson(resolvedProjectPath, projectId, projectApiToken);
            }
            yield spawnOrFail(`${npmRunCmd} build`, resolvedProjectPath);
        }
        else {
            throw new Error(`Unrecognized Plasmic scheme: ${scheme}`);
        }
        // Overwrite the index file
        yield file_utils_1.overwriteIndex(resolvedProjectPath, platform, scheme);
        /**
         * INSTRUCT USER ON NEXT STEPS
         */
        const command = platform === "nextjs"
            ? `${npmRunCmd} dev`
            : platform === "gatsby"
                ? `${npmRunCmd} develop`
                : platform === "react"
                    ? `${npmRunCmd} start`
                    : "";
        const relativeDir = path.relative(process.cwd(), resolvedProjectPath);
        // Overwrite README
        yield file_utils_1.overwriteReadme(resolvedProjectPath, platform, command);
        console.log("----------------------------------------");
        console.log(chalk_1.default.green.bold(`Congrats! We created the Plasmic-connected project at ${relativeDir}`));
        console.log();
        console.log();
        console.log();
        console.log("Change directories into your new project and start the development server:");
        console.log();
        console.log(chalk_1.default.bold(`cd ${relativeDir}`));
        console.log(chalk_1.default.bold(command));
        console.log();
        if (platform === "nextjs" || platform === "gatsby") {
            console.log("Navigate to the routes (e.g. /home) defined by your page components from Plasmic Studio.");
        }
        if (scheme === "codegen") {
            console.log("To watch for changes in Plasmic components, in a separate terminal run:");
            console.log(chalk_1.default.bold(`npx plasmic watch`));
        }
    });
}
exports.create = create;
function checkValidName(name) {
    // User need to specify a truthy value
    if (!name) {
        console.warn("Please specify the project directory");
        return false;
    }
    // Check that projectName is a valid npm package name
    const nameValidation = validate_npm_package_name_1.default(name);
    if (!nameValidation.validForNewPackages) {
        if (nameValidation.warnings) {
            nameValidation.warnings.forEach((e) => console.warn(e));
        }
        if (nameValidation.errors) {
            nameValidation.errors.forEach((e) => console.error(e));
        }
        console.warn(`'${name}' is not a valid name for an npm package. Please choose another name.`);
        return false;
    }
    return true;
}
exports.checkValidName = checkValidName;
function banner(message) {
    // 50-char width
    console.log();
    console.log("==================================================");
    console.log(chalk_1.default.bold(message));
    console.log("==================================================");
}
exports.banner = banner;
/**
 * Run a command synchronously
 * @returns
 */
function spawnOrFail(cmd, workingDir, customErrorMsg) {
    return __awaiter(this, void 0, void 0, function* () {
        const result = yield npm_utils_1.spawn(cmd, workingDir);
        if (!result) {
            throw new Error(customErrorMsg !== null && customErrorMsg !== void 0 ? customErrorMsg : `Failed to run "${cmd}"`);
        }
    });
}
/**
 * Re-export this so that consumers (e.g. plasmic-action)
 * can use it too
 */
exports.setMetadata = cli_1.setMetadataEnv;
