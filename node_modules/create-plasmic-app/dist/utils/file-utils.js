"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ifTs = exports.ensureTsconfig = exports.overwriteReadme = exports.overwriteIndex = exports.writePlasmicLoaderJson = exports.stripExtension = exports.deleteGlob = void 0;
const fs_1 = require("fs");
const glob_1 = __importDefault(require("glob"));
const lodash_1 = __importDefault(require("lodash"));
const path = __importStar(require("upath"));
const gatsby_1 = require("../templates/gatsby");
const readme_1 = require("../templates/readme");
const welcomePage_1 = require("../templates/welcomePage");
const lang_utils_1 = require("./lang-utils");
const npm_utils_1 = require("./npm-utils");
/**
 * Runs the search pattern through `glob` and deletes all resulting files
 * @param searchPattern - glob search query
 * @param skipPatterns - array of fragments. Skip any file contains any of the fragments
 */
function deleteGlob(searchPattern, skipPatterns) {
    const filesToDelete = glob_1.default
        .sync(searchPattern)
        .filter((file) => !skipPatterns || !skipPatterns.find((pattern) => file.includes(pattern)));
    filesToDelete.forEach((f) => fs_1.unlinkSync(f));
}
exports.deleteGlob = deleteGlob;
function stripExtension(filename, removeComposedPath = false) {
    const ext = removeComposedPath
        ? filename.substring(filename.indexOf("."))
        : path.extname(filename);
    if (!ext || filename === ext) {
        return filename;
    }
    return filename.substring(0, filename.lastIndexOf(ext));
}
exports.stripExtension = stripExtension;
function writePlasmicLoaderJson(projectDir, projectId, projectApiToken) {
    return __awaiter(this, void 0, void 0, function* () {
        const plasmicLoaderJson = path.join(projectDir, "plasmic-loader.json");
        const content = {
            projects: [
                {
                    projectId,
                    projectApiToken,
                },
            ],
        };
        yield fs_1.promises.writeFile(plasmicLoaderJson, JSON.stringify(content));
    });
}
exports.writePlasmicLoaderJson = writePlasmicLoaderJson;
/**
 * - [nextjs|gatsby, loader, '/' page exists] - remove index file
 * - [nextjs|gatsby, loader, '/' Page DNE] - replace index file with Welcome page
 * - [nextjs|gatsby, codegen, '/' page exists] - remove Next.js/Gatsby index file, preserve Plasmic index
 * - [nextjs|gatsby, codegen, '/' page DNE] - replace index file with Welcome page
 * - [react, codegen ]  - replace App file with '/', Home, or Welcome page
 * @returns
 */
function overwriteIndex(projectPath, platform, scheme) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const isNextjs = platform === "nextjs";
        const isGatsby = platform === "gatsby";
        const isCra = platform === "react";
        const config = yield getPlasmicConfig(projectPath, platform, scheme);
        const plasmicFiles = lodash_1.default.map(lodash_1.default.flatMap(config.projects, (p) => p.components), (c) => c.importSpec.modulePath);
        const isTypescript = ((_a = config === null || config === void 0 ? void 0 : config.code) === null || _a === void 0 ? void 0 : _a.lang) === "ts";
        const pagesDir = lang_utils_1.ensure(isNextjs
            ? path.join(projectPath, "pages/")
            : isGatsby
                ? path.join(projectPath, "src/pages/")
                : isCra
                    ? path.join(projectPath, "src/")
                    : undefined);
        const indexBasename = isCra ? `App` : `index`;
        const extension = isTypescript ? "tsx" : "jsx";
        const indexAbsPath = path.join(pagesDir, `${indexBasename}.${extension}`);
        // Delete existing index files
        // - Skipping any Plasmic-managed files
        // - Note: this only compares basenames, so it may have false positives
        deleteGlob(path.join(pagesDir, `${indexBasename}.*`), plasmicFiles.map((f) => path.basename(f)));
        // Special case: remove all Gatsby components (due to conflicting file names)
        // TODO: find a better way to handle this issue
        if (platform === "gatsby") {
            // Delete the index file
            deleteGlob(path.join(projectPath, "src/@(pages|components)/*.*"), [
                // Files to ignore
                ...plasmicFiles.map((f) => path.basename(f)),
            ]);
            // Create a very basic 404 page - `gatsby build` fails without it.
            // We've deleted the components that the default 404 page depended
            // on, so
            yield fs_1.promises.writeFile(path.join(projectPath, "src/pages/404.js"), gatsby_1.GATSBY_404);
        }
        // We're done if we can already render an index page
        if ((isNextjs || isGatsby) &&
            plasmicFiles.find((f) => f.includes("/index."))) {
            return;
        }
        const homeFilePossibilities = glob_1.default.sync(path.join(projectPath, lang_utils_1.ensureString(config.srcDir), "**", "@(index|Home|home).*"));
        const content = isCra && homeFilePossibilities.length > 0
            ? generateHomePage(homeFilePossibilities[0], indexAbsPath)
            : generateWelcomePage(config, platform);
        yield fs_1.promises.writeFile(indexAbsPath, content);
    });
}
exports.overwriteIndex = overwriteIndex;
/**
 * Overwrite the README file
 * @param projectPath
 * @param platform
 * @param buildCommand
 */
function overwriteReadme(projectPath, platform, buildCommand) {
    return __awaiter(this, void 0, void 0, function* () {
        const readmeFile = path.join(projectPath, "README.md");
        const contents = readme_1.README(platform, buildCommand);
        yield fs_1.promises.writeFile(readmeFile, contents);
    });
}
exports.overwriteReadme = overwriteReadme;
/**
 * Generate a file to render the component
 * @param componentAbsPath - absolute path to component to render
 * @param indexAbsPath - absolute path of index file to write
 * @returns
 */
function generateHomePage(componentAbsPath, indexAbsPath) {
    const componentFilename = path.basename(componentAbsPath);
    const componentName = stripExtension(componentFilename);
    // The relative import path from App.js to the Plasmic component
    const componentRelativePath = path.relative(path.dirname(indexAbsPath), componentAbsPath);
    const appjsContents = `
import ${componentName} from './${stripExtension(componentRelativePath)}';

function App() {
  return (<${componentName} />);
}

export default App;
  `;
    return appjsContents;
}
/**
 * Generate a Welcome page based on a PlasmicConfig
 * @param config - PlasmicConfig
 * @param noPages - don't render links to pages
 * @returns
 */
function generateWelcomePage(config, platform) {
    var _a, _b, _c;
    let hasPages = false;
    let pageComponents;
    let pagesDir;
    if (platform !== "react" && config && lodash_1.default.isArray(config.projects)) {
        pageComponents = lodash_1.default.flatMap(config.projects, (p) => p.components).filter((c) => c.componentType === "page");
        pagesDir = (_b = (_a = config === null || config === void 0 ? void 0 : config.nextjsConfig) === null || _a === void 0 ? void 0 : _a.pagesDir) !== null && _b !== void 0 ? _b : (_c = config === null || config === void 0 ? void 0 : config.gatsbyConfig) === null || _c === void 0 ? void 0 : _c.pagesDir;
        if (pageComponents.length > 0 && pagesDir) {
            hasPages = true;
        }
    }
    const getPageSection = () => {
        const pageLinks = pageComponents
            .map((pc) => {
            // Get the relative path on the filesystem
            const relativePath = path.relative(pagesDir, pc.importSpec.modulePath);
            // Format as an absolute path without the extension name
            const relativeLink = "/" + stripExtension(relativePath);
            if (platform === "nextjs") {
                return `<li><Link href="${relativeLink}"><a style={{ color: "blue" }}>${pc.name} - ${relativeLink}</a></Link></li>`;
            }
            else {
                return `<li><a style={{ color: "blue" }} href="${relativeLink}">${pc.name} - ${relativeLink}</a></li>`;
            }
        })
            .join("\n");
        return `
          <h3>Your pages:</h3>
          <ul>
            ${pageLinks}
          </ul>
    `;
    };
    const content = welcomePage_1.WELCOME_PAGE(hasPages, platform, hasPages ? getPageSection() : "");
    return content;
}
function getPlasmicConfig(projectPath, platform, scheme) {
    return __awaiter(this, void 0, void 0, function* () {
        const isNextjs = platform === "nextjs";
        const isGatsby = platform === "gatsby";
        const isLoader = scheme === "loader";
        const isCodegen = scheme === "codegen";
        const configPath = lang_utils_1.ensure(isCodegen
            ? "plasmic.json"
            : isNextjs && isLoader
                ? ".plasmic/plasmic.json"
                : isGatsby && isLoader
                    ? ".cache/.plasmic/plasmic.json"
                    : undefined);
        const configStr = yield fs_1.promises.readFile(path.join(projectPath, configPath));
        return JSON.parse(configStr.toString());
    });
}
// Create tsconfig.json if it doesn't exist
// this will force Plasmic to recognize Typescript
function ensureTsconfig(projectPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const tsconfigPath = path.join(projectPath, "tsconfig.json");
        if (!fs_1.existsSync(tsconfigPath)) {
            yield fs_1.promises.writeFile(tsconfigPath, "");
            const installTsResult = yield npm_utils_1.installUpgrade("typescript @types/react", {
                workingDir: projectPath,
            });
            if (!installTsResult) {
                throw new Error("Failed to install Typescript");
            }
        }
    });
}
exports.ensureTsconfig = ensureTsconfig;
function ifTs(ts, str) {
    return ts ? str : "";
}
exports.ifTs = ifTs;
