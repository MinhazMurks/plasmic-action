"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const cmd_utils_1 = require("../utils/cmd-utils");
const file_utils_1 = require("../utils/file-utils");
const npm_utils_1 = require("../utils/npm-utils");
const nextjsStrategy = {
    create: (args) => __awaiter(void 0, void 0, void 0, function* () {
        const { projectPath, template, useTypescript } = args;
        const createCommand = `npx -p create-next-app create-next-app ${useTypescript ? "--typescript" : ""} ${projectPath}`;
        const templateArg = template ? ` --template ${template}` : "";
        // Default Next.js starter already supports Typescript
        // See where we `touch tsconfig.json` later on
        yield cmd_utils_1.spawnOrFail(`${createCommand}${templateArg}`);
    }),
    configLoader: (args) => __awaiter(void 0, void 0, void 0, function* () {
        const { projectId, projectPath, projectApiToken, useTypescript } = args;
        const installResult = yield npm_utils_1.installUpgrade("@plasmicapp/loader-nextjs", {
            workingDir: projectPath,
        });
        if (!installResult) {
            throw new Error("Failed to install the Plasmic dependency");
        }
        yield file_utils_1.writeDefaultNextjsConfig(projectPath, projectId, true, projectApiToken, useTypescript);
    }),
    overwriteFiles: (args) => __awaiter(void 0, void 0, void 0, function* () {
        // this is supposed to be called for loader case, so we are supposed to remove
        // all the files from pages/ since we have inserted a optional catch all
        const { projectPath } = args;
        const pagesPath = path_1.default.join(projectPath, "pages");
        file_utils_1.deleteGlob(path_1.default.join(pagesPath, `*.*`), [
            "[[...catchall]]",
            "plasmic-host",
        ]);
    }),
    build: (args) => __awaiter(void 0, void 0, void 0, function* () {
        const { npmRunCmd, projectPath } = args;
        yield cmd_utils_1.spawnOrFail(`${npmRunCmd} build`, projectPath);
    }),
};
exports.default = nextjsStrategy;
