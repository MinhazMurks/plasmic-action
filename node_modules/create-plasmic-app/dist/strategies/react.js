"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const cmd_utils_1 = require("../utils/cmd-utils");
const file_utils_1 = require("../utils/file-utils");
const npm_utils_1 = require("../utils/npm-utils");
const common_1 = require("./common");
const reactStrategy = {
    create: (args) => __awaiter(void 0, void 0, void 0, function* () {
        const { projectPath, useTypescript } = args;
        let { template } = args;
        const createCommand = `npx -p create-react-app create-react-app ${projectPath}`;
        if (!template && useTypescript) {
            template = "typescript";
        }
        const templateArg = template ? ` --template ${template}` : "";
        yield cmd_utils_1.spawnOrFail(`${createCommand}${templateArg}`);
    }),
    installDeps: ({ projectPath, scheme }) => __awaiter(void 0, void 0, void 0, function* () {
        if (scheme === "loader") {
            return yield npm_utils_1.installUpgrade("@plasmicapp/loader-react", {
                workingDir: projectPath,
            });
        }
        else {
            return yield common_1.installCodegenDeps({ projectPath });
        }
    }),
    overwriteConfig: (args) => __awaiter(void 0, void 0, void 0, function* () {
        // No config to overwrite
    }),
    generateFiles: ({ scheme, projectApiToken, projectId, projectPath, }) => __awaiter(void 0, void 0, void 0, function* () {
        if (scheme === "loader") {
            // Nothing to do
        }
        else {
            yield common_1.runCodegenSync({
                projectId,
                projectApiToken,
                projectPath,
            });
            // Overwrite the index file
            yield file_utils_1.overwriteIndex(projectPath, "react", scheme);
        }
        return;
    }),
    build: (args) => __awaiter(void 0, void 0, void 0, function* () {
        const { npmRunCmd, projectPath } = args;
        yield cmd_utils_1.spawnOrFail(`${npmRunCmd} build`, projectPath);
    }),
};
exports.default = reactStrategy;
